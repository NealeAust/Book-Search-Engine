[{"C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\index.js":"1","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\App.js":"2","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\pages\\SavedBooks.js":"3","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\components\\Navbar.js":"4","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\pages\\SearchBooks.js":"5","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\components\\LoginForm.js":"6","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\components\\SignupForm.js":"7","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\queries.js":"8","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\mutations.js":"9","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\auth.js":"10","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\API.js":"11","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\localStorage.js":"12"},{"size":266,"mtime":1682198795117,"results":"13","hashOfConfig":"14"},{"size":1488,"mtime":1683087835035,"results":"15","hashOfConfig":"14"},{"size":2221,"mtime":1683168339132,"results":"16","hashOfConfig":"14"},{"size":2567,"mtime":1682198795116,"results":"17","hashOfConfig":"14"},{"size":4807,"mtime":1683168184802,"results":"18","hashOfConfig":"14"},{"size":2618,"mtime":1683167008861,"results":"19","hashOfConfig":"14"},{"size":3350,"mtime":1683165201877,"results":"20","hashOfConfig":"14"},{"size":313,"mtime":1683082112482,"results":"21","hashOfConfig":"14"},{"size":1350,"mtime":1683085827185,"results":"22","hashOfConfig":"14"},{"size":1236,"mtime":1682824730789,"results":"23","hashOfConfig":"14"},{"size":1392,"mtime":1682198795129,"results":"24","hashOfConfig":"14"},{"size":793,"mtime":1682198795130,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cq6se5",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\index.js",[],[],"C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\App.js",[],[],"C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\pages\\SavedBooks.js",["66"],[],"import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button} from 'react-bootstrap';\nimport{ useQuery, useMutation } from '@apollo/client'\nimport { GET_ME, } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n \nconst { loading, data} = useQuery(GET_ME)\nconst [removeBook, {error}] = useMutation(REMOVE_BOOK);\n\nconst userData = data?.me || [];\n\nconst handleDeleteBook = async (bookId) => {\n\nconst token = Auth.loggedIn() ? Auth.getToken() : null;\n\n\n        if (!token) {\n          return false;\n        }\n\n  try {\n        const { data } = await removeBook ({\n            variables: { bookId }\n        });\n\n        removeBookId(bookId);\n      } catch (err) {\n        console.error(error);\n      }\n    };\n  \n    // if data isn't here yet, say so\n    if (loading) {\n      return <h2>LOADING...</h2>;\n    }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark '>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n        </Jumbotron>\n        <Container>\n         <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n               <Card key={book.bookId} border='dark'>\n                  {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className='small'>Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                      Delete this Book!\n                    </Button>\n                  </Card.Body>\n                </Card>\n               );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\components\\Navbar.js",[],[],"C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\pages\\SearchBooks.js",["67","68","69"],[],"import React, { useState, useEffect } from 'react';\nimport {  Jumbotron, Container,  Col,  Form,  Button,  Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nimport { SAVE_BOOK } from '../utils/mutations';\nimport {useMutation} from '@apollo/client';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, {error}] = useMutation(SAVE_BOOK );\n\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { ...bookToSave }\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n          <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                  {book.image ? (\n                    <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                  ) : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className='small'>Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button\n                        disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                        className='btn-block btn-info'\n                        onClick={() => handleSaveBook(book.bookId)}>\n                        {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                          ? 'This book has already been saved!'\n                          : 'Save this Book!'}\n                      </Button>\n                    )}\n                  </Card.Body>\n                </Card>\n              );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks; \n","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\components\\LoginForm.js",[],[],"C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\components\\SignupForm.js",["70"],[],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  \n  const [addUser, { error }] = useMutation(ADD_USER)\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n         }\n\n    try {\n       // execute addUser mutation and pass in variable data from form\n       const { data } = await addUser({\n        variables: { ...userFormData}\n      });\n\n      Auth.login(data.addUser.token)\n\n    } catch (e) {\n      console.error(e);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n          <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\queries.js",[],[],"C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\mutations.js",[],[],"C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\auth.js",["71"],[],"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());  \n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\API.js",[],[],"C:\\Users\\neale\\bootcamp\\my-weekly-challenge-folder\\Book-Search-Engine\\client\\src\\utils\\localStorage.js",[],[],{"ruleId":"72","severity":1,"message":"73","line":26,"column":17,"nodeType":"74","messageId":"75","endLine":26,"endColumn":21},{"ruleId":"72","severity":1,"message":"76","line":5,"column":10,"nodeType":"74","messageId":"75","endLine":5,"endColumn":18},{"ruleId":"72","severity":1,"message":"77","line":20,"column":21,"nodeType":"74","messageId":"75","endLine":20,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":74,"column":15,"nodeType":"74","messageId":"75","endLine":74,"endColumn":19},{"ruleId":"72","severity":1,"message":"77","line":18,"column":21,"nodeType":"74","messageId":"75","endLine":18,"endColumn":26},{"ruleId":"78","severity":1,"message":"79","line":49,"column":1,"nodeType":"80","endLine":49,"endColumn":34},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'saveBook' is defined but never used.","'error' is assigned a value but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration"]